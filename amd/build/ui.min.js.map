{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny stash UI.\n *\n * @module      tiny_stash/ui\n * @copyright   2023 Adrian Greeve <adriangreeve.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport Ajax from 'core/ajax';\nimport {getContextId} from 'editor_tiny/options';\nimport {getCourseId} from 'tiny_stash/options';\nimport $ from 'jquery';\nimport * as DropAdd from 'tiny_stash/drop-add';\n\nlet itemsData = {};\n\n/**\n * Handle action\n * @param {TinyMCE} editor\n */\nexport const handleAction = (editor) => {\n    displayDialogue(editor);\n};\n\n/**\n * Display the drop dialogue.\n *\n * @param {TinyMCE} editor\n * @returns {Promise<void>}\n */\nconst displayDialogue = async(editor) => {\n    let contextid = getContextId(editor);\n    let data = await getAllDropData(contextid);\n    let courseid = getCourseId(editor);\n    let itemdata = await getAllItemData(courseid);\n    itemdata.items.forEach((item) => {\n        itemsData[item.id] = item;\n    });\n    // window.console.log(data);\n\n    const modalPromises = await ModalFactory.create({\n        title: \"Stash stuff here\",\n        type: ModalFactory.types.SAVE_CANCEL,\n        body: Templates.render('tiny_stash/drop-code-selector', data),\n        large: true,\n    });\n\n    modalPromises.show();\n    const $root = await modalPromises.getRoot();\n    const root = $root[0];\n\n    let savedata = {};\n\n    $root.on(ModalEvents.hidden, () => {\n        modalPromises.destroy();\n    });\n\n    $root.on(ModalEvents.bodyRendered, () => {\n        addAddDropListener(editor);\n\n        // Add a listener for the appearance select box.\n        addAppearanceListener();\n        addTextAndImageListener();\n\n        $('.carousel').on('slide.bs.carousel', async () => {\n            if (DropAdd.Status == 'Saved') {\n                // Reload the drop list.\n                data = await getAllDropData(contextid);\n                Templates.render('tiny_stash/drop-select', data).then((html, js) => {\n                    let selectnode = document.querySelector('.tiny-stash-drop-select');\n                    Templates.replaceNodeContents(selectnode, html, js);\n                    addAddDropListener(editor);\n                });\n                DropAdd.Status = 'Clear';\n            }\n        });\n    });\n\n    $root.on(ModalEvents.save, () => {\n        let activetab = document.querySelector('[aria-selected=\"true\"][data-tiny-stash]');\n        let codearea = '';\n        if (activetab.getAttribute('aria-controls') == 'items') {\n            codearea = document.getElementsByClassName('tiny-stash-item-code');\n        } else {\n            codearea = document.getElementsByClassName('tiny-stash-trade-code');\n        }\n        savedata.codearea = codearea[0].innerText;\n        editor.execCommand('mceInsertContent', false, savedata.codearea);\n    });\n\n    root.addEventListener('click', (event) => {\n        let element = event.target;\n        let elementtype = element.dataset.type;\n        if (element.nodeName === \"OPTION\" && elementtype == 'item') {\n            let itemid = element.dataset.id;\n            let codearea = document.getElementsByClassName('tiny-stash-item-code');\n            let buttontext = document.querySelector('input[name=\"actiontext\"]').value;\n            let dropcode = \"[stashdrop secret=\\\"\" + element.dataset.hash + \"\\\" text=\\\"\" + buttontext + \"\\\" name=\\\"\" +\n                    itemsData[itemid].name + \"\\\" image]\";\n            updatePreview(itemid);\n            codearea[0].innerText = dropcode;\n        }\n        if (element.nodeName === \"OPTION\" && elementtype == 'trade') {\n            let codearea = document.getElementsByClassName('tiny-stash-trade-code');\n            let dropcode = \"[stashtrade secret=\\\"\" + element.dataset.hash + \"\\\"]\";\n            codearea[0].innerText = dropcode;\n        }\n    });\n};\n\nconst addAddDropListener = (editor) => {\n    let temp = document.getElementsByClassName('tiny-stash-add-drop');\n    temp[0].addEventListener('click', (e) => {\n        e.preventDefault();\n        $('.carousel').carousel('next');\n        $('.carousel').carousel('pause');\n        // init drop add page.\n        DropAdd.init(itemsData, editor);\n    });\n};\n\nconst addAppearanceListener = () => {\n    let selectnode = document.querySelector('.tiny-stash-appearance');\n    selectnode.addEventListener('change', (e) => {\n        let selectedelement = e.target.selectedOptions[0];\n        if (selectedelement.value == 'text') {\n            document.querySelector('.snippet-label').classList.remove('d-none');\n            document.querySelector('.snippet-actiontext').classList.add('d-none');\n        }\n        if (selectedelement.value == 'image') {\n            document.querySelector('.snippet-label').classList.add('d-none');\n            document.querySelector('.snippet-actiontext').classList.add('d-none');\n        }\n        if (selectedelement.value == 'imageandbutton') {\n            document.querySelector('.snippet-label').classList.add('d-none');\n            document.querySelector('.snippet-actiontext').classList.remove('d-none');\n        }\n\n    });\n};\n\nconst addTextAndImageListener = () => {\n    let textnode = document.querySelector('input[name=\"actiontext\"]');\n    textnode.addEventListener('keyup', (e) => {\n        // if no preview exit early.\n        if (!document.querySelector('.block-stash-item')) {\n            return;\n        }\n        let buttontext = e.currentTarget.value;\n        let previewbutton = document.querySelector('.tiny-stash-button-preview');\n        previewbutton.innerText = buttontext;\n        // Update the snippet text.\n        let codearea = document.getElementsByClassName('tiny-stash-item-code');\n        let codetext = codearea[0].innerHTML;\n        window.console.log(codetext);\n    });\n};\n\n/**\n * Update the preview image.\n *\n * @param {int} itemid\n */\nconst updatePreview = (itemid) => {\n    let previewnode = document.querySelector('.preview');\n    previewnode.children.forEach((child) => { previewnode.removeChild(child); });\n\n    let wrappingdiv = document.createElement('div');\n    wrappingdiv.classList.add('block-stash-item');\n    let imagediv = document.createElement('div');\n    imagediv.classList.add('item-image');\n    imagediv.style.backgroundImage = 'url(' + itemsData[itemid].imageurl + ')';\n    let buttondiv = document.createElement('div');\n    buttondiv.classList.add('item-action');\n    let button = document.createElement('button');\n    button.classList.add('btn');\n    button.classList.add('btn-secondary');\n    button.classList.add('tiny-stash-button-preview');\n    let temp = document.querySelector('input[name=\"actiontext\"]');\n    button.innerHTML = temp.value;\n    buttondiv.appendChild(button);\n    wrappingdiv.appendChild(imagediv);\n    wrappingdiv.appendChild(buttondiv);\n    previewnode.appendChild(wrappingdiv);\n};\n\n/**\n * Get all drop data.\n *\n * @param {int} contextid - The context id.\n * @returns {Promise<void>}\n */\nconst getAllDropData = (contextid) => Ajax.call([{\n    methodname: 'block_stash_get_all_drops',\n    args: {contextid: contextid}\n}])[0];\n\n/**\n * Get all item data.\n *\n * @param {int} courseid - The course id.\n * @returns {Promise<void>}\n */\nconst getAllItemData = (courseid) => Ajax.call([{\n    methodname: 'block_stash_get_items',\n    args: {courseid: courseid}\n}])[0];\n"],"names":["itemsData","editor","displayDialogue","async","contextid","data","getAllDropData","courseid","getAllItemData","items","forEach","item","id","modalPromises","ModalFactory","create","title","type","types","SAVE_CANCEL","body","Templates","render","large","show","$root","getRoot","root","savedata","on","ModalEvents","hidden","destroy","bodyRendered","addAddDropListener","addAppearanceListener","addTextAndImageListener","DropAdd","Status","then","html","js","selectnode","document","querySelector","replaceNodeContents","save","codearea","getAttribute","getElementsByClassName","innerText","execCommand","addEventListener","event","element","target","elementtype","dataset","nodeName","itemid","buttontext","value","dropcode","hash","name","updatePreview","e","preventDefault","carousel","init","selectedelement","selectedOptions","classList","remove","add","currentTarget","codetext","innerHTML","window","console","log","previewnode","children","child","removeChild","wrappingdiv","createElement","imagediv","style","backgroundImage","imageurl","buttondiv","button","temp","appendChild","Ajax","call","methodname","args"],"mappings":"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"}